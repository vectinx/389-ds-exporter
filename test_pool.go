package main

import (
	"errors"
	"log"
	"sync"
	"time"

	"github.com/go-ldap/ldap/v3"
)

// ================================
// üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É–ª–∞
// ================================
type LdapPoolConfig struct {
	URL         string        // ldap:// –∏–ª–∏ ldaps://
	BindDN      string        // —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è bind
	BindPass    string        // –ø–∞—Ä–æ–ª—å
	MaxConns    int           // –º–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	IdleTTL     time.Duration // —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å idle-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	DialTimeout time.Duration // —Ç–∞–π–º–∞—É—Ç –¥–ª—è dial
	RetryCount  int           // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
	RetryDelay  time.Duration // –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
}

// ================================
// üí° –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—É–ª–∞
// ================================
type LdapPool struct {
	config LdapPoolConfig
	conns  chan *pooledConn
	mu     sync.Mutex
	active int // —Å–∫–æ–ª—å–∫–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–æ
	stopGC chan struct{}
}

// üëá –æ–±–µ—Ä–Ω—É—Ç–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
type pooledConn struct {
	conn     *ldap.Conn
	lastUsed time.Time
}

// ================================
// ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞
// ================================
func NewLdapPool(cfg LdapPoolConfig) *LdapPool {
	pool := &LdapPool{
		config: cfg,
		conns:  make(chan *pooledConn, cfg.MaxConns),
		stopGC: make(chan struct{}),
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É idle-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	go pool.gcIdleConns()

	return pool
}

// ================================
// üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å timeout
// ================================
func (p *LdapPool) Get(timeout time.Duration) (*ldap.Conn, error) {
	// 1. –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –∏–∑ –ø—É–ª–∞
	select {
	case pooled := <-p.conns:
		if isAlive(pooled.conn) {
			return pooled.conn, nil
		}
		// –±–∏—Ç–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
		_ = pooled.conn.Close()
		p.decrActive()
		return p.newConnWithRetry()
	default:
		// 2. –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ (–µ—Å–ª–∏ –º–æ–∂–µ–º)
		p.mu.Lock()
		if p.active < p.config.MaxConns {
			p.active++
			p.mu.Unlock()
			return p.newConnWithRetry()
		}
		p.mu.Unlock()

		// 3. –ñ–¥—ë–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
		select {
		case pooled := <-p.conns:
			if isAlive(pooled.conn) {
				return pooled.conn, nil
			}
			_ = pooled.conn.Close()
			p.decrActive()
			return p.newConnWithRetry()
		case <-time.After(timeout):
			return nil, errors.New("LDAP pool: timeout waiting for connection")
		}
	}
}

// ================================
// ‚ôªÔ∏è –í–µ—Ä–Ω—É—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª
// ================================
func (p *LdapPool) Put(conn *ldap.Conn) {
	if conn == nil {
		return
	}
	select {
	case p.conns <- &pooledConn{conn: conn, lastUsed: time.Now()}:
	default:
		// –µ—Å–ª–∏ –ø—É–ª –ø–æ–ª–æ–Ω ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
		_ = conn.Close()
		p.decrActive()
	}
}

// ================================
// ‚ùå –ó–∞–∫—Ä—ã—Ç—å –ø—É–ª
// ================================
func (p *LdapPool) Close() {
	close(p.stopGC)
	close(p.conns)
	for pooled := range p.conns {
		_ = pooled.conn.Close()
	}
}

// ================================
// üîÅ –§–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ idle-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
// ================================
func (p *LdapPool) gcIdleConns() {
	ticker := time.NewTicker(p.config.IdleTTL / 2)
	defer ticker.Stop()

	for {
		select {
		case <-p.stopGC:
			return
		case <-ticker.C:
			p.cleanupIdle()
		}
	}
}

func (p *LdapPool) cleanupIdle() {
	now := time.Now()
	for {
		select {
		case pooled := <-p.conns:
			if now.Sub(pooled.lastUsed) > p.config.IdleTTL {
				_ = pooled.conn.Close()
				p.decrActive()
			} else {
				// –≤–µ—Ä–Ω—É—Ç—å –æ–±—Ä–∞—Ç–Ω–æ ‚Äî –æ–Ω–æ –µ—â–µ –∂–∏–≤–æ–µ
				select {
				case p.conns <- pooled:
				default:
					_ = pooled.conn.Close()
					p.decrActive()
				}
				return
			}
		default:
			return
		}
	}
}

// ================================
// üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å Retry
// ================================
func (p *LdapPool) newConnWithRetry() (*ldap.Conn, error) {
	var conn *ldap.Conn
	var err error
	for i := 0; i < p.config.RetryCount; i++ {
		conn, err = ldap.DialURL(p.config.URL)
		if err == nil {
			err = conn.Bind(p.config.BindDN, p.config.BindPass)
			if err == nil {
				return conn, nil
			}
			conn.Close()
		}
		log.Printf("[ldap-pool] retry %d: %v", i+1, err)
		time.Sleep(p.config.RetryDelay)
	}
	p.decrActive()
	return nil, err
}

func (p *LdapPool) decrActive() {
	p.mu.Lock()
	p.active--
	p.mu.Unlock()
}

// ================================
// üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
// ================================
func isAlive(conn *ldap.Conn) bool {
	conn.SetTimeout(2 * time.Second)
	req := ldap.NewSearchRequest(
		"",
		ldap.ScopeBaseObject,
		ldap.NeverDerefAliases,
		1, 0, false,
		"(objectClass=*)",
		[]string{"dn"},
		nil,
	)
	_, err := conn.Search(req)
	return err == nil
}
